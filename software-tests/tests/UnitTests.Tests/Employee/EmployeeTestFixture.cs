using Bogus;
using Bogus.DataSets;
using System;
using UnitTests.Lib;
using Xunit;

namespace UnitTests.Tests
{
    // With colletion definition we can use the same instance of objects
    // Objects created in a fixture is valid all along time in colletion, its be very usefull in cases like in memory database
    [CollectionDefinition(nameof(EmployeeColletion))]
    public class EmployeeColletion : ICollectionFixture<EmployeeTestFixture>
    { }


    // A fixture can be used in any tests classes 
    public class EmployeeTestFixture : IDisposable
    {
        public Employee CreateValidEmployee()
        {
            var gender = new Faker().PickRandom<Name.Gender>();

            // Bogus generate a fake employee with random data
            var employee = new Faker<Employee>(locale: "pt_BR")
                .CustomInstantiator(faker => EmployeeFactory.Create(
                    name: faker.Name.FirstName(gender),
                    surname: faker.Name.LastName(gender),
                    salary: faker.Random.Decimal(1000, 10000),
                    email: "",
                    bithDate: faker.Date.Past(100, DateTime.Now.AddYears(-16))
                    ))
                // Because we want create a email with name a and surname generated by Bogus
                .RuleFor(employee => employee.Email, (faker, employee) => faker.Internet.Email(employee.Name.ToLower(), employee.Surname.ToLower()));

            return employee;
        }

        public Employee CreateInvalidEmployee()
        {
            var gender = new Faker().PickRandom<Name.Gender>();

            // Bogus generate a fake employee with random data
            var employee = new Faker<Employee>(locale: "pt_BR")
                .CustomInstantiator(faker => EmployeeFactory.Create(
                    name: faker.Name.FirstName(gender),
                    surname: faker.Name.LastName(gender),
                    salary: faker.Random.Decimal(1000, 10000),
                    email: "",
                    bithDate: faker.Date.Past(5, DateTime.Now.AddYears(-10))
                    ))
                // Because we want create a email with name a and surname generated by Bogus
                .RuleFor(employee => employee.Email, (faker, employee) => faker.Internet.Email(employee.Name.ToLower(), employee.Surname.ToLower()));

            return employee;
        }

        public void Dispose()
        {
        }
    }
}
